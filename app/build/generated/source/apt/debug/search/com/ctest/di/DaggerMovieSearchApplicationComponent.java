// Generated by Dagger (https://google.github.io/dagger).
package search.com.ctest.di;

import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import search.com.ctest.browse.movies.list.MovieList;
import search.com.ctest.browse.movies.list.MovieListContract;
import search.com.ctest.browse.movies.list.MovieList_MembersInjector;
import search.com.ctest.repository.MovieRepository;

public final class DaggerMovieSearchApplicationComponent
    implements MovieSearchApplicationComponent {
  private MovieSearchApplicationModule_ProvideNetworkLayerFactory provideNetworkLayerProvider;

  private MovieSearchApplicationModule_ProvideServiceFactory provideServiceProvider;

  private Provider<MovieRepository> provideDataRepositoryProvider;

  private Provider<MovieListContract.Presenter> providePresenterProvider;

  private DaggerMovieSearchApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MovieSearchApplicationComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideNetworkLayerProvider =
        MovieSearchApplicationModule_ProvideNetworkLayerFactory.create(
            builder.movieSearchApplicationModule);
    this.provideServiceProvider =
        MovieSearchApplicationModule_ProvideServiceFactory.create(
            builder.movieSearchApplicationModule, provideNetworkLayerProvider);
    this.provideDataRepositoryProvider =
        DoubleCheck.provider(
            MovieSearchApplicationModule_ProvideDataRepositoryFactory.create(
                builder.movieSearchApplicationModule, provideServiceProvider));
    this.providePresenterProvider =
        DoubleCheck.provider(
            MovieSearchApplicationModule_ProvidePresenterFactory.create(
                builder.movieSearchApplicationModule, provideDataRepositoryProvider));
  }

  @Override
  public void inject(MovieList movieList) {
    injectMovieList(movieList);
  }

  private MovieList injectMovieList(MovieList instance) {
    MovieList_MembersInjector.injectPresenter(instance, providePresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private MovieSearchApplicationModule movieSearchApplicationModule;

    private Builder() {}

    public MovieSearchApplicationComponent build() {
      if (movieSearchApplicationModule == null) {
        this.movieSearchApplicationModule = new MovieSearchApplicationModule();
      }
      return new DaggerMovieSearchApplicationComponent(this);
    }

    public Builder movieSearchApplicationModule(
        MovieSearchApplicationModule movieSearchApplicationModule) {
      this.movieSearchApplicationModule = Preconditions.checkNotNull(movieSearchApplicationModule);
      return this;
    }
  }
}
