// Generated by Dagger (https://google.github.io/dagger).
package search.com.ctest.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import search.com.ctest.repository.MovieRepository;
import search.com.ctest.service.CareemServices;

public final class MovieSearchApplicationModule_ProvideDataRepositoryFactory
    implements Factory<MovieRepository> {
  private final MovieSearchApplicationModule module;

  private final Provider<CareemServices> serviceProvider;

  public MovieSearchApplicationModule_ProvideDataRepositoryFactory(
      MovieSearchApplicationModule module, Provider<CareemServices> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public MovieRepository get() {
    return Preconditions.checkNotNull(
        module.provideDataRepository(serviceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieSearchApplicationModule_ProvideDataRepositoryFactory create(
      MovieSearchApplicationModule module, Provider<CareemServices> serviceProvider) {
    return new MovieSearchApplicationModule_ProvideDataRepositoryFactory(module, serviceProvider);
  }

  public static MovieRepository proxyProvideDataRepository(
      MovieSearchApplicationModule instance, CareemServices service) {
    return Preconditions.checkNotNull(
        instance.provideDataRepository(service),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
