// Generated by Dagger (https://google.github.io/dagger).
package search.com.ctest.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import search.com.ctest.browse.movies.list.MovieListContract;
import search.com.ctest.repository.MovieRepository;

public final class MovieSearchApplicationModule_ProvidePresenterFactory
    implements Factory<MovieListContract.Presenter> {
  private final MovieSearchApplicationModule module;

  private final Provider<MovieRepository> repoProvider;

  public MovieSearchApplicationModule_ProvidePresenterFactory(
      MovieSearchApplicationModule module, Provider<MovieRepository> repoProvider) {
    this.module = module;
    this.repoProvider = repoProvider;
  }

  @Override
  public MovieListContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.providePresenter(repoProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieSearchApplicationModule_ProvidePresenterFactory create(
      MovieSearchApplicationModule module, Provider<MovieRepository> repoProvider) {
    return new MovieSearchApplicationModule_ProvidePresenterFactory(module, repoProvider);
  }

  public static MovieListContract.Presenter proxyProvidePresenter(
      MovieSearchApplicationModule instance, MovieRepository repo) {
    return Preconditions.checkNotNull(
        instance.providePresenter(repo),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
