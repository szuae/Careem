// Generated by Dagger (https://google.github.io/dagger).
package search.com.ctest.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import search.com.ctest.network.NetworkLayer;
import search.com.ctest.service.CareemServices;

public final class MovieSearchApplicationModule_ProvideServiceFactory
    implements Factory<CareemServices> {
  private final MovieSearchApplicationModule module;

  private final Provider<NetworkLayer> networkLayerProvider;

  public MovieSearchApplicationModule_ProvideServiceFactory(
      MovieSearchApplicationModule module, Provider<NetworkLayer> networkLayerProvider) {
    this.module = module;
    this.networkLayerProvider = networkLayerProvider;
  }

  @Override
  public CareemServices get() {
    return Preconditions.checkNotNull(
        module.provideService(networkLayerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MovieSearchApplicationModule_ProvideServiceFactory create(
      MovieSearchApplicationModule module, Provider<NetworkLayer> networkLayerProvider) {
    return new MovieSearchApplicationModule_ProvideServiceFactory(module, networkLayerProvider);
  }

  public static CareemServices proxyProvideService(
      MovieSearchApplicationModule instance, NetworkLayer networkLayer) {
    return Preconditions.checkNotNull(
        instance.provideService(networkLayer),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
